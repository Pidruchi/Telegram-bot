import asyncio
import os
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_IDS = [290137835, 343133386]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram user ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("appointments.db")
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        date TEXT,
        symptoms TEXT
    )
''')
conn.commit()

# FSM –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –ø—Ä–∏–π–æ–º
class AppointmentForm(StatesGroup):
    name = State()
    date = State()
    symptoms = State()

# –§—É–Ω–∫—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º", callback_data="book")],
        [InlineKeyboardButton(text="‚ùì –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="faq_menu")],
        [InlineKeyboardButton(text="üöë –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –ø–ª–∞—Ç–Ω–∞ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –ª—ñ–∫–∞—Ä–µ–º", callback_data="urgent_consult")],
        [InlineKeyboardButton(text="üéì –ü—Ä–∏–¥–±–∞—Ç–∏ –∫—É—Ä—Å –ø–æ –¥–æ–≥–ª—è–¥—É –∑–∞ –¥–∏—Ç–∏–Ω–æ—é", callback_data="buy_course")]
    ])
    await message.answer("–í—ñ—Ç–∞—é! –Ø –≤–∞—à —Å—ñ–º–µ–π–Ω–∏–π –ª—ñ–∫–∞—Ä. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await send_main_menu(message)

# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—ñ–≤
@dp.message(F.text == "/admin")
async def admin_handler(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏", callback_data="confirm_delete")]
    ])

    cursor.execute("SELECT * FROM appointments ORDER BY date")
    rows = cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
        return

    text = "üìã –ó–∞–ø–∏—Å–∏ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤:\n\n"
    for row in rows:
        text += f"üÜî {row[0]} | üë§ {row[1]} | üìÖ {row[2]}\nüí¨ {row[3]}\n\n"

    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "confirm_delete")
async def confirm_delete(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_records")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back_to_menu")]
    ])
    await callback.message.answer("‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏?", reply_markup=keyboard)

@dp.callback_query(F.data == "delete_records")
async def delete_records(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –¥—ñ—ó.", show_alert=True)
        return

    cursor.execute("DELETE FROM appointments")
    conn.commit()

    await callback.answer("‚úÖ –í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    await callback.message.edit_text("‚úÖ –í—Å—ñ –∑–∞–ø–∏—Å–∏ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "book")
async def book_appointment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))
    await state.set_state(AppointmentForm.name)

@dp.message(AppointmentForm.name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†)", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))
    await state.set_state(AppointmentForm.date)

@dp.message(AppointmentForm.date)
async def enter_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–û–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ —Å–∏–º–ø—Ç–æ–º–∏ –∞–±–æ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–∑–∏—Ç—É", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]))
    await state.set_state(AppointmentForm.symptoms)

@dp.message(AppointmentForm.symptoms)
async def enter_symptoms(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    date = data["date"]
    symptoms = message.text

    cursor.execute("INSERT INTO appointments (name, date, symptoms) VALUES (?, ?, ?)", (name, date, symptoms))
    conn.commit()

    await message.answer(f"–î—è–∫—É—é! –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {date} —è–∫ {name}. –°–∏–º–ø—Ç–æ–º–∏: {symptoms}")

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f"üÜï –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\nüë§ {name}\nüìÖ {date}\nüí¨ {symptoms}")

    await state.clear()
    await send_main_menu(message)

@dp.callback_query(F.data == "faq_menu")
async def show_faq_menu(callback: CallbackQuery):
    faq_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå° –©–æ —Ä–æ–±–∏—Ç–∏ —è–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?", callback_data="faq_temp")],
        [InlineKeyboardButton(text="ü¶∑ –†—ñ–∂—É—Ç—å—Å—è –∑—É–±–∫–∏", callback_data="faq_teeth")],
        [InlineKeyboardButton(text="ü§í –ù–µ–∂–∏—Ç—å —É –¥–∏—Ç–∏–Ω–∏", callback_data="faq_nose")],
        [InlineKeyboardButton(text="üí§ –ü–æ–≥–∞–Ω–∏–π —Å–æ–Ω —É –Ω–µ–º–æ–≤–ª—è—Ç–∏", callback_data="faq_sleep")],
        [InlineKeyboardButton(text="ü§¢ –í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ —ó–∂—ñ", callback_data="faq_eating")],
        [InlineKeyboardButton(text="üí© –ß–∞—Å—Ç—ñ –ø—Ä–æ–Ω–æ—Å–∏", callback_data="faq_diarrhea")],
        [InlineKeyboardButton(text="ü´Å –ö–∞—à–µ–ª—å —Ç–∞ —Ö—Ä–∏–ø–∏", callback_data="faq_cough")],
        [InlineKeyboardButton(text="üë∂ –Ø–∫ –º—ñ—Ä—è—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–µ–º–æ–≤–ª—è—Ç—ñ?", callback_data="faq_measure_temp")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=faq_keyboard)

@dp.callback_query(F.data.startswith("faq_"))
async def handle_faq(callback: CallbackQuery):
    faq_answers = {
        "faq_temp": "üå° –Ø–∫—â–æ —É –¥–∏—Ç–∏–Ω–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–π—Ç–µ –∂–∞—Ä–æ–∑–Ω–∏–∂—É—é—á–µ (–ø–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª/—ñ–±—É–ø—Ä–æ—Ñ–µ–Ω) –∑–≥—ñ–¥–Ω–æ –≤—ñ–∫—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è, —è–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ > 38,5¬∞C –ø–æ–Ω–∞–¥ 2 –¥–Ω—ñ.",
        "faq_teeth": "ü¶∑ –ü—ñ–¥ —á–∞—Å –ø—Ä–æ—Ä—ñ–∑—É–≤–∞–Ω–Ω—è –∑—É–±—ñ–≤ –º–æ–∂–ª–∏–≤–∏–π –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, —Å–ª–∏–Ω–æ—Ç–µ—á–∞, –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω—ñ –ø—Ä–æ—Ä—ñ–∑—É–≤–∞—á—ñ –∞–±–æ –≥–µ–ª—ñ –∑ –ª—ñ–¥–æ–∫–∞—ó–Ω–æ–º.",
        "faq_nose": "ü§í –Ø–∫—â–æ —É –¥–∏—Ç–∏–Ω–∏ –Ω–µ–∂–∏—Ç—å ‚Äî –ø—Ä–æ–º–∏–≤–∞–π—Ç–µ –Ω—ñ—Å —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—á–Ω–∏–º —Ä–æ–∑—á–∏–Ω–æ–º —Ç–∞ –≤—ñ–¥—Å–º–æ–∫—Ç—É–π—Ç–µ —Å–ª–∏–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞—Å–ø—ñ—Ä–∞—Ç–æ—Ä–∞.",
        "faq_sleep": "üí§ –ü–æ–≥–∞–Ω–∏–π —Å–æ–Ω –º–æ–∂–µ –±—É—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–ª—ñ–∫–∏, –≥–æ–ª–æ–¥ –∞–±–æ –ø—Ä–æ—Ä—ñ–∑—É–≤–∞–Ω–Ω—è –∑—É–±—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ç–∞ —Ä–µ–∂–∏–º —Å–Ω—É.",
        "faq_eating": "ü§¢ –í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ —ó–∂—ñ –º–æ–∂–µ –±—É—Ç–∏ —Å–∏–º–ø—Ç–æ–º–æ–º –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ä—ñ–∑—É–≤–∞–Ω–Ω—è –∑—É–±—ñ–≤. –Ø–∫—â–æ —Ü–µ —Ç—Ä–∏–≤–∞—î >2 –¥–Ω—ñ–≤ ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "faq_diarrhea": "üí© –ß–∞—Å—Ç—ñ –ø—Ä–æ–Ω–æ—Å–∏ –º–æ–∂—É—Ç—å —Å–≤—ñ–¥—á–∏—Ç–∏ –ø—Ä–æ –∫–∏—à–∫–æ–≤—É —ñ–Ω—Ñ–µ–∫—Ü—ñ—é. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –≥—ñ–¥—Ä–∞—Ç–∞—Ü—ñ—î—é, –ø—Ä–∏ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—ñ ‚Äî –¥–æ –ª—ñ–∫–∞—Ä—è.",
        "faq_cough": "ü´Å –ü—Ä–∏ –∫–∞—à–ª—ñ –∑ —Ö—Ä–∏–ø–∞–º–∏ ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø–µ–¥—ñ–∞—Ç—Ä–∞. –£–Ω–∏–∫–∞–π—Ç–µ —Å–∞–º–æ–ª—ñ–∫—É–≤–∞–Ω–Ω—è –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–∞–º–∏.",
        "faq_measure_temp": "üë∂ –í–∏–º—ñ—Ä—é–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ä–µ–∫—Ç–∞–ª—å–Ω–æ —É –Ω–µ–º–æ–≤–ª—è—Ç ‚Äî —Ü–µ –Ω–∞–π–±—ñ–ª—å—à —Ç–æ—á–Ω–∏–π –º–µ—Ç–æ–¥. –ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –¥–æ 37.5¬∞C."
    }
    response = faq_answers.get(callback.data)
    if response:
        await callback.message.answer(response)

@dp.callback_query(F.data == "urgent_consult")
async def urgent_consult(callback: CallbackQuery):
    await callback.message.answer(
        "üí≥ –î–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—ó –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏", url="https://your-payment-link.com")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(F.data == "buy_course")
async def buy_course(callback: CallbackQuery):
    await callback.message.answer(
        "–ö—É—Ä—Å –ø–æ –¥–æ–≥–ª—è–¥—É –∑–∞ –¥–∏—Ç–∏–Ω–æ—é –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—É—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫—É—Ä—Å—É", url="https://your-course-link.com")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await send_main_menu(callback.message)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
